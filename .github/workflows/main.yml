name: Python Wheel CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This job builds wheels for Windows x86_64 arch
  build-windows-x86_64:
    runs-on: windows-latest
    steps:
      - name: Cache .hunter folder
        uses: actions/cache@v2
        with:
          path: ~/.hunter/
          key: hunter-msvc
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Append build hash if not a tagged commit
        if: github.ref != 'refs/tags/*'
        run: echo '::set-env name=BUILD_COMMIT_HASH::${{github.sha}}'
      - name: Building wheels
        run: Get-ChildItem "C:/hostedtoolcache/windows/Python/3.*/x64/python.exe" | foreach { iex "$_ -m pip wheel . -w ./wheelhouse/" }
      - name: Archive wheel artifacts
        uses: actions/upload-artifact@v2
        with:
          name: audited-wheels
          path: wheelhouse/

  # This job builds wheels for x86_64 arch
  build-linux-x86_64:
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux2014_x86_64
      env:
        PLAT: manylinux2014_x86_64
    steps:
      - name: Cache .hunter folder
        uses: actions/cache@v2
        with:
          path: ~/.hunter/
          key: hunter-x86_64
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Installing libusb1-devel dependency
        run: yum install -y --disableplugin=fastestmirror libusb1-devel
      - name: Installing cmake dependency
        run: |
          /opt/python/cp38-cp38/bin/python3.8 -m pip install cmake
          ln -s /opt/python/cp38-cp38/bin/cmake /bin/
      - name: Create folder structure
        run: mkdir -p wheelhouse/audited/
      - name: Append build hash if not a tagged commit
        if: github.ref != 'refs/tags/*'
        run: echo '::set-env name=BUILD_COMMIT_HASH::${{github.sha}}'
      - name: Building a source distribution
        run: |
          /opt/python/cp38-cp38/bin/python3.8 setup.py sdist --formats=bztar,zip
          mv dist/* wheelhouse/audited/
      - name: Building wheels
        run: for PYBIN in /opt/python/cp3*/bin; do "${PYBIN}/pip" wheel . -w ./wheelhouse/; done
      - name: Auditing wheels
        run: for whl in wheelhouse/*.whl; do auditwheel repair "$whl" --plat $PLAT -w wheelhouse/audited/; done
      - name: Archive wheel artifacts
        uses: actions/upload-artifact@v2
        with:
          name: audited-wheels
          path: wheelhouse/audited/

  # This job builds wheels for armhf arch
  build-linux-armhf:
    runs-on: luxonis-armhf
    container: registry.gitlab.com/luxonis/depthai-crosscompile/debian-buster
    steps:
      - name: Cache .hunter folder
        uses: actions/cache@v2
        with:
          path: ~/.hunter/
          key: hunter-armhf
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Append build hash if not a tagged commit
        if: github.ref != 'refs/tags/*'
        run: echo '::set-env name=BUILD_COMMIT_HASH::${{github.sha}}'
      - name: Building wheel
        run: python3 -m pip wheel . -w ./wheelhouse/
      - name: Auditing wheel
        run: for whl in wheelhouse/*.whl; do auditwheel repair "$whl" --plat linux_armv7l -w wheelhouse/audited/; done
      - name: Archive wheel artifacts
        uses: actions/upload-artifact@v2
        with:
          name: audited-wheels
          path: wheelhouse/audited/

  # Run tests
  tests:
    runs-on: luxonis-armhf
    needs: [build-linux-armhf, build-windows-x86_64, build-linux-x86_64]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: audited-wheels
      - name: List files
        run: ls -lah
      - name: Run tests
        run: python3 -c "print('testing...')"

  # Deploy to artifactory
  deploy-artifacts:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions/download-artifact@v2
        with:
          name: audited-wheels
      - name: List files
        run: ls -lah && ls -lah ci
      - name: Run deploy to artifacts
        run: bash ./ci/upload-artifactory.sh
        env:
          ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
          ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
          ARTIFACTORY_PASS: ${{ secrets.ARTIFACTORY_PASS }}

  # Deploy to PyPi. Only when a commit is tagged
  deploy-pypi:
    if: github.ref == 'refs/tags/*'
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions/download-artifact@v2
        with:
          name: audited-wheels
      - name: List files
        run: ls -lah
      - name: Run deploy to PyPi
        run: bash ./ci/upload-pypi.sh
        env:
          PYPI_SERVER: ${{ secrets.PYPI_SERVER }}
          PYPI_USER: ${{ secrets.PYPI_USER }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

