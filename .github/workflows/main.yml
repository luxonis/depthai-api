name: Python Wheel CI

# Controls when the action will run. Triggers the workflow on push

###################################
# WARNING #########################
# as self-hosted runners are used, and security policy for them has not been yet determined by GitHub
# pay close attention to not enable workflows on pull_request events
# TLDR: do NOT add 'pull_request' here for the time being
on: [push] 
###################################
###################################

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This job builds wheels for armhf arch (RPi)
  build-linux-armhf:
    runs-on: luxonis-armhf
    container: 
      image: registry.gitlab.com/luxonis/depthai-crosscompile/debian-buster
      # Mount local hunter cache directory, instead of transfering to Github and back
      volumes:
        - /.hunter:/github/home/.hunter
    steps:
      - name: Print home directory
        run: echo Home directory inside container $HOME
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Append build hash if not a tagged commit
        if: startsWith(github.ref, 'refs/tags/v') != true
        run: echo "BUILD_COMMIT_HASH=${{github.sha}}" >> $GITHUB_ENV
      - name: Building wheel
        run: python3 -m pip wheel . -w ./wheelhouse/
      - name: Auditing wheel
        run: for whl in wheelhouse/*.whl; do auditwheel repair "$whl" --plat linux_armv7l -w wheelhouse/audited/; done
      - name: Archive wheel artifacts
        uses: actions/upload-artifact@v2
        with:
          name: audited-wheels
          path: wheelhouse/audited/

  # This job builds wheels for Windows x86_64 arch
  build-windows-x86_64:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8, 3.9]
        python-architecture: [x64, x86]
    steps:
      - name: Cache .hunter folder
        uses: actions/cache@v2
        with:
          path: ~/.hunter/
          key: hunter-msvc
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with: 
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.python-architecture }}
      - name: Append build hash if not a tagged commit
        if: startsWith(github.ref, 'refs/tags/v') != true
        run: echo "BUILD_COMMIT_HASH=${{github.sha}}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
      - name: Building wheels
        run: python -m pip wheel . -w ./wheelhouse/
      - name: Archive wheel artifacts
        uses: actions/upload-artifact@v2
        with:
          name: audited-wheels
          path: wheelhouse/

  # This job builds wheels for macOS x86_64 arch
  build-macos-x86_64:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8, 3.9]
    steps:
      - name: Cache .hunter folder
        uses: actions/cache@v2
        with:
          path: ~/.hunter/
          key: hunter-clang
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with: 
          python-version: ${{ matrix.python-version }}
      - name: Append build hash if not a tagged commit
        if: startsWith(github.ref, 'refs/tags/v') != true
        run: echo "BUILD_COMMIT_HASH=${{github.sha}}" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          brew install libusb
          python -m pip install delocate
      - name: Set macos deployment target
        run: echo "MACOSX_DEPLOYMENT_TARGET=10.9" >> $GITHUB_ENV
      - name: Building wheels
        run: python -m pip wheel . -w ./wheelhouse/
      - name: Auditing wheels
        run: ci/repair-whl-macos.sh `pwd`/wheelhouse/* `pwd`/wheelhouse/audited      
      - name: Archive wheel artifacts
        uses: actions/upload-artifact@v2
        with:
          name: audited-wheels
          path: wheelhouse/audited/

  # This job builds wheels for x86_64 arch
  build-linux-x86_64:
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux2014_x86_64
      env:
        PLAT: manylinux2014_x86_64
    steps:
      - name: Cache .hunter folder
        uses: actions/cache@v2
        with:
          path: ~/.hunter/
          key: hunter-x86_64
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Installing libusb1-devel dependency
        run: yum install -y --disableplugin=fastestmirror libusb1-devel
      - name: Installing cmake dependency
        run: |
          /opt/python/cp38-cp38/bin/python3.8 -m pip install cmake
          ln -s /opt/python/cp38-cp38/bin/cmake /bin/
      - name: Create folder structure
        run: mkdir -p wheelhouse/audited/
      - name: Append build hash if not a tagged commit
        if: startsWith(github.ref, 'refs/tags/v') != true
        run: echo "BUILD_COMMIT_HASH=${{github.sha}}" >> $GITHUB_ENV
      - name: Building a source distribution
        run: |
          /opt/python/cp38-cp38/bin/python3.8 setup.py sdist --formats=gztar
          mv dist/* wheelhouse/audited/
      - name: Building wheels
        run: for PYBIN in /opt/python/cp3*/bin; do "${PYBIN}/pip" wheel . -w ./wheelhouse/; done
      - name: Auditing wheels
        run: for whl in wheelhouse/*.whl; do auditwheel repair "$whl" --plat $PLAT -w wheelhouse/audited/; done
      - name: Archive wheel artifacts
        uses: actions/upload-artifact@v2
        with:
          name: audited-wheels
          path: wheelhouse/audited/

  # Run tests
#  tests:
#    runs-on: luxonis-arm-tests
#    needs: [build-linux-armhf, build-windows-x86_64, build-macos-x86_64, build-linux-x86_64]
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: 'recursive'
#      - uses: actions/download-artifact@v2
#        with:
#          name: audited-wheels
#          path: wheels/depthai/
#      - name: List files
#        run: ls -lah
#      - name: install DepthAI
#        run: python3.7 -m pip install depthai --no-index --find-links file://`pwd`/wheels/depthai/
#      - name: Run tests
#        run: python3.7 tests/test.py

  # Deploy to artifactory
  deploy-artifacts:
    if: startsWith(github.ref, 'refs/tags/v') != true
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions/download-artifact@v2
        with:
          name: audited-wheels
          path: wheelhouse/audited/
      - name: List files
        run: ls -lah wheelhouse/audited/
      - name: Run deploy to artifacts
        run: bash ./ci/upload-artifactory.sh
        env:
          ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
          ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
          ARTIFACTORY_PASS: ${{ secrets.ARTIFACTORY_PASS }}

  # Deploy to PyPi. Only when a commit is tagged
  deploy-pypi:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions/download-artifact@v2
        with:
          name: audited-wheels
          path: wheelhouse/audited/
      - name: List files
        run: ls -lah
      - name: Run deploy to PyPi
        run: bash ./ci/upload-pypi.sh
        env:
          PYPI_SERVER: ${{ secrets.PYPI_SERVER }}
          PYPI_USER: ${{ secrets.PYPI_USER }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

